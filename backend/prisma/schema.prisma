generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model recipe {
  id                 Int                  @id @default(autoincrement())
  authorID           Int
  creationTime       DateTime             @default(now())
  recipeTitle        String
  description        String
  cookTimeHours      Int?
  cootTimeMinutes    Int
  calories           Int?
  servings           Int
  recipeImage        String
  user               user                 @relation(fields: [authorID], references: [id], map: "Recipe_authorID_fkey")
  recipeingredients  recipeingredients[]
  recipeinstructions recipeinstructions[]
  usersavedrecipes   usersavedrecipes[]
  recipetags         recipetags[]         @relation("recipetorecipetags")

  @@index([authorID], map: "Recipe_authorID_fkey")
}

model recipeingredients {
  id              Int    @id @default(autoincrement())
  recipeID        Int
  ingredient      String
  amount          Int
  measurementType String
  recipe          recipe @relation(fields: [recipeID], references: [id], map: "RecipeIngredients_recipeID_fkey")

  @@index([recipeID], map: "RecipeIngredients_recipeID_fkey")
}

model recipeinstructions {
  id          Int    @id @default(autoincrement())
  recipeID    Int
  step        Int?
  instruction String
  recipe      recipe @relation(fields: [recipeID], references: [id], map: "RecipeInstructions_recipeID_fkey")

  @@index([recipeID], map: "RecipeInstructions_recipeID_fkey")
}

model recipetags {
  id     Int      @id @default(autoincrement())
  tag    String
  recipe recipe[] @relation("recipetorecipetags")
}

model user {
  id               Int                @id @default(autoincrement())
  email            String             @unique(map: "User_email_key")
  username         String             @unique(map: "User_username_key")
  password         String
  createDate       DateTime           @default(now())
  isModerator      Boolean            @default(false)
  recipe           recipe[]
  userposts        userposts[]
  usersavedrecipes usersavedrecipes[]
}

model usersavedrecipes {
  userID    Int
  recipeID  Int
  timeSaved DateTime @default(now())
  recipe    recipe   @relation(fields: [recipeID], references: [id], map: "UserSavedRecipes_recipeID_fkey")
  user      user     @relation(fields: [userID], references: [id], map: "UserSavedRecipes_userID_fkey")

  @@id([userID, recipeID])
  @@index([recipeID], map: "UserSavedRecipes_recipeID_fkey")
}

model posts {
  id           Int        @id @default(autoincrement())
  author       Int
  description  String
  tags         String
  image        String
  recipeURL    String
  creationTime DateTime   @default(now())
  posttags     posttags[]
  userposts    userposts?
}

model posttags {
  id     Int    @id @default(autoincrement())
  postID Int
  tag    String
  posts  posts  @relation(fields: [postID], references: [id], onDelete: Cascade, map: "PostTags_postID_fkey")

  @@index([postID], map: "PostTags_postID_fkey")
}

model userposts {
  postID Int   @unique(map: "UserPosts_postID_key")
  author Int
  user   user  @relation(fields: [author], references: [id], onDelete: Cascade, map: "UserPosts_author_fkey")
  posts  posts @relation(fields: [postID], references: [id], onDelete: Cascade, map: "UserPosts_postID_fkey")

  @@index([author], map: "UserPosts_author_fkey")
}
