generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  email        String             @unique
  username     String             @unique
  password     String
  createDate   DateTime           @default(now())
  isModerator Boolean @default(false)
  savedRecipes UserSavedRecipes[]
  recipes      Recipe[]
  userPosts    UserPosts[]
}

model Recipe {
  id                 Int                  @id @default(autoincrement())
  authorID           Int
  creationTime       DateTime             @default(now())
  recipeTitle        String
  description        String
  cookTimeHours      Int?
  cootTimeMinutes    Int
  calories           Int?
  servings           Int
  recipeImage        String
  user               user                 @relation(fields: [authorID], references: [id], map: "Recipe_authorID_fkey")
  recipeingredients  recipeingredients[]
  recipeinstructions recipeinstructions[]
  usersavedrecipes   usersavedrecipes[]
  recipetags         recipetags[]         @relation("recipetorecipetags")

  @@index([authorID], map: "Recipe_authorID_fkey")
}

model recipeingredients {
  id              Int    @id @default(autoincrement())
  recipeID        Int
  ingredient      String
  amount          Int
  measurementType String
  recipe          recipe @relation(fields: [recipeID], references: [id], map: "RecipeIngredients_recipeID_fkey")

  @@index([recipeID], map: "RecipeIngredients_recipeID_fkey")
}

model recipeinstructions {
  id          Int    @id @default(autoincrement())
  recipeID    Int
  step        Int?
  instruction String
  recipe      recipe @relation(fields: [recipeID], references: [id], map: "RecipeInstructions_recipeID_fkey")

  @@index([recipeID], map: "RecipeInstructions_recipeID_fkey")
}

model recipetags {
  id     Int      @id @default(autoincrement())
  tag    String
  recipe recipe[] @relation("recipetorecipetags")
}

model user {
  id               Int                @id @default(autoincrement())
  email            String             @unique(map: "User_email_key")
  username         String             @unique(map: "User_username_key")
  password         String
  createDate       DateTime           @default(now())
  isModerator      Boolean            @default(false)
  recipe           recipe[]
  userposts        userposts[]
  usersavedrecipes usersavedrecipes[]
}

model usersavedrecipes {
  userID    Int
  recipeID  Int
  timeSaved DateTime @default(now())
  recipe    recipe   @relation(fields: [recipeID], references: [id], map: "UserSavedRecipes_recipeID_fkey")
  user      user     @relation(fields: [userID], references: [id], map: "UserSavedRecipes_userID_fkey")

  @@id([userID, recipeID])
}

model Posts {
  id            Int         @id @default(autoincrement())
  author        Int
  description   String
  tags          String
  image         String
  recipeURL     String
  creationTime  DateTime    @default(now())
  userPosts     UserPosts[]
  postTags      PostTags[]
}

model UserPosts {
  postID    Int     @unique
  author    Int
  userID    User    @relation(fields: [author], references: [id], onDelete: Cascade)
  post      Posts   @relation(fields: [postID], references: [id], onDelete: Cascade)
}

model PostTags {
  id        Int         @id @default(autoincrement())
  postID    Int
  tag       String
  postId    Posts       @relation(fields: [postID], references: [id], onDelete: Cascade)
}

